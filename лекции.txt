1 лекция

от 2 до 5 человек(первый 2 3)
первый проект калькулятор
сосчитать выражение
на 5 надо комплексную арефметику на защите будет вопросы, в группе должен быть человек отвечающий за тесты
могут быть вопросы по коду на защиту 5 минут(3 минуты на калькулятор)
дедлайн 2 февраля пишем на плюсах
моделирование экосистемы, сетевая игра - другие проекты
« поток вывода
std пространство имён
\n быстрее endl
int& - ссылка/указатель (2 имя переменной) должна быть инициализированан сразу, операции выполняются над переменно на которую указывает ссылка
int* arr = new int[size] - создание массива delete[] arr -удаление массива.
класс это абстрактный тип данных. данные класса - поля
инкопсуляция - скрытие данных от пользователя

2 лекция 

класс это тип данных
объект это экземпляр, програмисты это аутисты!!!
список инициализации в {}
int это класс(как и другие типы данных)
есть поля класса которые можно инициализировать только в полях это const, ссылки, поля класса без типа по умолчанию
в c++ нет типа по умолчанию
:: - операция разрешения области видимости бывает в бинарном и унарном слева имя класса или вложенае пространоство имён самый высокий приоритет
Исключения - дальнейшая работа программы не возможна
разработчик класса знает где ошибка, но не знает что с ней делать, а пользователь разработчик исп. класс не знает когда ошибка но знает что делать.
каждая функция класса в качестве первого не явного параметра аргумента имеет специальный указатель который хранит адрес объекта (this)

3 лекция

конструкторы нужны для того, чтобы мусор не лажел в полях и объки был в адекватном состоянии.
конструктор копирования работает, когда мы передаём, возвращаем объект из функции. 
друзья:
классы имеют особый доступ друг к другу. "Друзья" класса имеют доступ к закрытой части класса. 
Друзья - это либо другие классы, либо отдельные функции других клаассов, либо отдельные функции (даже main).
"Дружественность" требует явного объвления, отношение "дружественности" не симметричны. 
Отношения дружественности не транзитивны. 
Отношение дружественности не наследуется.
можно "дружить" с тем, кого нет.
отношение "дружественности" нарушают принцип инкапсуляции (сокрытие данных).

статические члены класса:
всегда существуют.
экземпляры класса могут пользоваться ими, при этом число статических членов не меняется.
статические поля создаются отдельно от объектов.
статическме поля нужны, если хотите знать сколько экземпляров класса создано (база данных); обмен данными;
можно вызвать через имя класа или объекта.
статические функции класса нужны для работы со статическимим полями класса.
статические поля харанятся отдельно от объектов.
статические функции чаще всего хранятся в разделе public.
из статических функций можно обращаться только к статическим полям класса.
статические функции не могут быть констатными.
статические функции не могут быть виртуальными.
статические функциях нет указателя this.
для вызова статической функции в момент, когда не создано ни одного объекта класса, можно написать имя класса, поставить два двоеточия и указать имя функции.

4 лекция.
перегрузка операторов:
позволяют использовать стандарт операции с классами(плюс минус и тд)
оператор используется как функция в имени которой есть operator  и знак операци
оператор может быть перегружен  как член класса либо внешняя функция
нельзя перегрузить некоторый (:: . .* ?: sizeof typdef)
операции ->  {} = () должны быть перегружены как члены класса
нельзя создавать новые лексемы операции
нельзя изменять арность, приоритет, ассоциативность(лево право), смысл операции операций
если функция возврашает изменения то она должна возвращать ссылку
функция может обращатся к правайт части если они одного класса
присваивание можно использовать без предворительной перегрузки
если класс работает с памятью то перегрузка = нужна
если левый аперанд операции не экземпляр класса для которого перегружена операция то эту операцию можно перегрузить только как внешнюю
бинарые операции
член класса один параметр
внешний 2 парамметра
Унарные операции
член класса 0
внешнее 1
плохо ведущие себя операции инкремент и дикримент
правило их перегрузки: так как эти операции существуют в двух формах префиксная перегружается по правилу дейст. для всех операций а постфиксная получпет фиктивный параметр int
operator(int) int фиктивна


5 лекция.
перегрузка копирующего оператора = (Алгоритм):
(можно исп-ть без предварительной перегрузки)
(оператор присваивание будет тут заниматься глубоким копированием)
1.защита от самоприсваивания (в main() v1 = v1, это ошибка, будет удалено раньше, чем запишется в переменную; можно сравнить адреса пере-
менных: if (this != &right);).
2.очистка ранее выделенной памяти (delete[] arr).
3.выделение нового блока памяти и работа с ним(arr = new int[capacity = right.capasity]).
4. возврат изменённого объекта (return *this).

6 лекция.
Наследования- вариант повторного использования кода( as is)
Опред: 
способ повторного использования кода при кторомо новые классы создаються из уже существующих классов
предок не знает что у него есть потомок а потоиок знает.
у одного класса может быть несколько родителей(2 3 и тд)
*фото1*
privat наследуется но прямого доступа у детей нет.
протектет только для наследников (друзья>дети)
обездетывачиние(функция final)
друзья детей имеют доступ к протектот части.
*фото2*
не наследуются конструкторы, диструкторы, друзья, операторы присваивания
подъёмна сила крыла. Если подуть сверху на листочек то он поднимиться. Можно взрывать петарды в туалет. Просто физика(со смыслом)
по умолчанию наследование private
можно делать срезку(смотреть только на часть переменных)

